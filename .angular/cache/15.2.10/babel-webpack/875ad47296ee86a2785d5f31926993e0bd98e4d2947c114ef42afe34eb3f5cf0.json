{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/QuizService/quiz.service\";\nexport class AttemptComponent {\n  constructor(route, router, quizService) {\n    this.route = route;\n    this.router = router;\n    this.quizService = quizService;\n    this.attempt = {\n      idAttempt: '',\n      quizId: '',\n      username: '',\n      attemptDate: new Date(),\n      responses: {},\n      score: 0 // Calculé à partir des réponses\n    };\n  }\n  ngOnInit() {\n    const quizId = this.route.snapshot.paramMap.get('quizId');\n    if (quizId !== null) {\n      // Load the quiz details based on quizId\n      this.quizService.getQuizById(quizId).subscribe(quiz => {\n        this.quiz = quiz;\n        // Prepare the attempt object\n        this.attempt = {\n          quizId: quizId,\n          username: 'user123',\n          responses: {}\n        };\n      }, error => {\n        console.error('Error loading quiz', error);\n        // Handle error, for example, navigate to an error page\n        this.router.navigate(['/error']);\n      });\n    } else {\n      // Handle the case where quizId is null\n      console.error('Invalid quizId'); // Log an error message\n      // Redirect to an error page or handle it as needed\n      this.router.navigate(['/error']);\n    }\n  }\n  // Function to submit the attempt\n  submitAttempt() {\n    // Calculate the score\n    this.attempt.score = this.calculateScore();\n    // Set attemptDate\n    this.attempt.attemptDate = new Date();\n    // Save the attempt\n    this.quizService.submitAttempt(this.attempt).subscribe(result => {\n      console.log('Attempt submitted successfully', result);\n      // Redirect to the result page or quiz list page\n      this.router.navigate(['/result', result.idAttempt]); // Assuming result contains the idAttempt\n    }, error => {\n      console.error('Error submitting attempt', error);\n      // Handle error, for example, display an error message to the user\n    });\n  }\n  // Function to calculate the score based on user responses\n  calculateScore() {\n    let score = 0;\n    // Loop through questions and check responses\n    this.quiz.questions.forEach(question => {\n      const selectedOptionIndex = this.attempt.responses[question.id]; // Get the selected option index for the question\n      if (selectedOptionIndex !== undefined && selectedOptionIndex !== null) {\n        if (selectedOptionIndex === question.correctAnswerIndex) {\n          // If the selected option index is correct, increment the score\n          score++;\n        }\n      }\n    });\n    return score;\n  }\n  static #_ = this.ɵfac = function AttemptComponent_Factory(t) {\n    return new (t || AttemptComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.QuizService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AttemptComponent,\n    selectors: [[\"app-attempts\"]],\n    decls: 2,\n    vars: 0,\n    template: function AttemptComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"attempts works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhdHRlbXB0cy5jb21wb25lbnQuY3NzIn0= */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvQXR0ZW1wdC9hdHRlbXB0cy9hdHRlbXB0cy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxvS0FBb0siLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["AttemptComponent","constructor","route","router","quizService","attempt","idAttempt","quizId","username","attemptDate","Date","responses","score","ngOnInit","snapshot","paramMap","get","getQuizById","subscribe","quiz","error","console","navigate","submitAttempt","calculateScore","result","log","questions","forEach","question","selectedOptionIndex","id","undefined","correctAnswerIndex","_","i0","ɵɵdirectiveInject","i1","ActivatedRoute","Router","i2","QuizService","_2","selectors","decls","vars","template","AttemptComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sourceRoot":"","sources":["C:\\Users\\Rahma\\Desktop\\Testing\\CoursZeloFront\\CoursZelo\\src\\app\\Attempt\\attempts\\attempts.component.ts","C:\\Users\\Rahma\\Desktop\\Testing\\CoursZeloFront\\CoursZelo\\src\\app\\Attempt\\attempts\\attempts.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { QuizService } from 'src/app/QuizService/quiz.service'; \r\n\r\n@Component({\r\n  selector: 'app-attempts',\r\n  templateUrl: './attempts.component.html',\r\n  styleUrls: ['./attempts.component.css']\r\n})\r\nexport class AttemptComponent implements OnInit {\r\n  attempt: any = {\r\n    idAttempt: '',\r\n    quizId: '',\r\n    username: '',\r\n    attemptDate: new Date(),\r\n    responses: {}, // Clé: ID de la question, Valeur: réponse donnée\r\n    score: 0 // Calculé à partir des réponses\r\n  };\r\n  quiz: any; // To store the quiz details\r\n\r\n  constructor(private route: ActivatedRoute, private router: Router, private quizService: QuizService) {}\r\n\r\n  ngOnInit(): void {\r\n    const quizId = this.route.snapshot.paramMap.get('quizId');\r\n    if (quizId !== null) {\r\n        // Load the quiz details based on quizId\r\n        this.quizService.getQuizById(quizId).subscribe(\r\n            (quiz: any) => {\r\n                this.quiz = quiz;\r\n                // Prepare the attempt object\r\n                this.attempt = {\r\n                    quizId: quizId,\r\n                    username: 'user123', // You can set the username based on the logged-in user\r\n                    responses: {}\r\n                };\r\n            },\r\n            error => {\r\n                console.error('Error loading quiz', error);\r\n                // Handle error, for example, navigate to an error page\r\n                this.router.navigate(['/error']);\r\n            }\r\n        );\r\n    } else {\r\n        // Handle the case where quizId is null\r\n        console.error('Invalid quizId'); // Log an error message\r\n        // Redirect to an error page or handle it as needed\r\n        this.router.navigate(['/error']);\r\n    }\r\n}\r\n\r\n\r\n  // Function to submit the attempt\r\n  submitAttempt(): void {\r\n    // Calculate the score\r\n    this.attempt.score = this.calculateScore();\r\n    // Set attemptDate\r\n    this.attempt.attemptDate = new Date();\r\n    // Save the attempt\r\n    this.quizService.submitAttempt(this.attempt).subscribe(\r\n      (result: any) => {\r\n        console.log('Attempt submitted successfully', result);\r\n        // Redirect to the result page or quiz list page\r\n        this.router.navigate(['/result', result.idAttempt]); // Assuming result contains the idAttempt\r\n      },\r\n      (error: any) => { // Specify the type for 'error' parameter\r\n        console.error('Error submitting attempt', error);\r\n        // Handle error, for example, display an error message to the user\r\n      }\r\n    );\r\n  }\r\n\r\n  // Function to calculate the score based on user responses\r\n  calculateScore(): number {\r\n    let score = 0;\r\n    // Loop through questions and check responses\r\n    this.quiz.questions.forEach((question: any) => {\r\n      const selectedOptionIndex = this.attempt.responses[question.id]; // Get the selected option index for the question\r\n      if (selectedOptionIndex !== undefined && selectedOptionIndex !== null) {\r\n        if (selectedOptionIndex === question.correctAnswerIndex) {\r\n          // If the selected option index is correct, increment the score\r\n          score++;\r\n        }\r\n      }\r\n    });\r\n    return score;\r\n  }\r\n}\r\n","<p>attempts works!</p>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}