{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/QuizService/quiz.service\";\nfunction QuestionComponent_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 2);\n    i0.ɵɵlistener(\"click\", function QuestionComponent_li_4_Template_li_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const i_r2 = restoredCtx.index;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.selectAnswer(i_r2));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r1, \" \");\n  }\n}\nexport class QuestionComponent {\n  constructor(route, router, quizService) {\n    this.route = route;\n    this.router = router;\n    this.quizService = quizService;\n    this.responses = {}; // Stores the student's selected options\n    this.studentName = '';\n    this.feedback = '';\n  }\n  ngOnInit() {\n    const quizId = this.route.snapshot.paramMap.get('quizId');\n    if (quizId) {\n      this.quizService.getQuiz(quizId).subscribe(quizData => {\n        this.quiz = quizData;\n      }, error => {\n        console.error('Error loading quiz', error);\n      });\n    }\n  }\n  selectOption(questionId, optionIndex) {\n    this.responses[questionId] = optionIndex;\n  }\n  submitAttempt() {\n    const attemptData = {\n      quizId: this.quiz.id,\n      studentName: this.studentName,\n      responses: this.responses,\n      feedback: this.feedback\n    };\n    // Call to the service to submit the attempt\n    // Assuming you have a method in your QuizService to handle this\n  }\n  static #_ = this.ɵfac = function QuestionComponent_Factory(t) {\n    return new (t || QuestionComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.QuizService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: QuestionComponent,\n    selectors: [[\"app-question\"]],\n    decls: 5,\n    vars: 2,\n    consts: [[1, \"question\"], [3, \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\"]],\n    template: function QuestionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"p\");\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"ul\");\n        i0.ɵɵtemplate(4, QuestionComponent_li_4_Template, 2, 1, \"li\", 1);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.question.text);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.question.options);\n      }\n    },\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJxdWVzdGlvbi5jb21wb25lbnQuY3NzIn0= */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvUXVlc3Rpb25zL3F1ZXN0aW9uL3F1ZXN0aW9uLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLG9LQUFvSyIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":";;;;;;IAGMA,EAAA,CAAAC,cAAA,YAAqF;IAA1BD,EAAA,CAAAE,UAAA,mBAAAC,oDAAA;MAAA,MAAAC,WAAA,GAAAJ,EAAA,CAAAK,aAAA,CAAAC,GAAA;MAAA,MAAAC,IAAA,GAAAH,WAAA,CAAAI,KAAA;MAAA,MAAAC,MAAA,GAAAT,EAAA,CAAAU,aAAA;MAAA,OAASV,EAAA,CAAAW,WAAA,CAAAF,MAAA,CAAAG,YAAA,CAAAL,IAAA,CAAe;IAAA,EAAC;IAClFP,EAAA,CAAAa,MAAA,GACF;IAAAb,EAAA,CAAAc,YAAA,EAAK;;;;IADHd,EAAA,CAAAe,SAAA,GACF;IADEf,EAAA,CAAAgB,kBAAA,MAAAC,SAAA,MACF;;;ACKN,OAAM,MAAOC,iBAAiB;EAM5BC,YACUC,KAAqB,EACrBC,MAAc,EACdC,WAAwB;IAFxB,KAAAF,KAAK,GAALA,KAAK;IACL,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,WAAW,GAAXA,WAAW;IAPrB,KAAAC,SAAS,GAA8B,EAAE,CAAC,CAAC;IAC3C,KAAAC,WAAW,GAAW,EAAE;IACxB,KAAAC,QAAQ,GAAW,EAAE;EAMlB;EAEHC,QAAQA,CAAA;IACN,MAAMC,MAAM,GAAG,IAAI,CAACP,KAAK,CAACQ,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,QAAQ,CAAC;IACzD,IAAIH,MAAM,EAAE;MACV,IAAI,CAACL,WAAW,CAACS,OAAO,CAACJ,MAAM,CAAC,CAACK,SAAS,CACvCC,QAAQ,IAAI;QACX,IAAI,CAACC,IAAI,GAAGD,QAAQ;MACtB,CAAC,EACAE,KAAK,IAAI;QACRC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC5C,CAAC,CACF;;EAEL;EAEAE,YAAYA,CAACC,UAAkB,EAAEC,WAAmB;IAClD,IAAI,CAAChB,SAAS,CAACe,UAAU,CAAC,GAAGC,WAAW;EAC1C;EAEAC,aAAaA,CAAA;IACX,MAAMC,WAAW,GAAG;MAClBd,MAAM,EAAE,IAAI,CAACO,IAAI,CAACQ,EAAE;MACpBlB,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BD,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBE,QAAQ,EAAE,IAAI,CAACA;KAChB;IACD;IACA;EACF;EAAC,QAAAkB,CAAA;qBAvCUzB,iBAAiB,EAAAlB,EAAA,CAAA4C,iBAAA,CAAAC,EAAA,CAAAC,cAAA,GAAA9C,EAAA,CAAA4C,iBAAA,CAAAC,EAAA,CAAAE,MAAA,GAAA/C,EAAA,CAAA4C,iBAAA,CAAAI,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA;UAAjBhC,iBAAiB;IAAAiC,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,2BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QDV9BzD,EAAA,CAAAC,cAAA,aAAsB;QACfD,EAAA,CAAAa,MAAA,GAAmB;QAAAb,EAAA,CAAAc,YAAA,EAAI;QAC1Bd,EAAA,CAAAC,cAAA,SAAI;QACFD,EAAA,CAAA2D,UAAA,IAAAC,+BAAA,gBAEK;QACP5D,EAAA,CAAAc,YAAA,EAAK;;;QALFd,EAAA,CAAAe,SAAA,GAAmB;QAAnBf,EAAA,CAAA6D,iBAAA,CAAAH,GAAA,CAAAI,QAAA,CAAAC,IAAA,CAAmB;QAEG/D,EAAA,CAAAe,SAAA,GAAqB;QAArBf,EAAA,CAAAgE,UAAA,YAAAN,GAAA,CAAAI,QAAA,CAAAG,OAAA,CAAqB","names":["i0","ɵɵelementStart","ɵɵlistener","QuestionComponent_li_4_Template_li_click_0_listener","restoredCtx","ɵɵrestoreView","_r4","i_r2","index","ctx_r3","ɵɵnextContext","ɵɵresetView","selectAnswer","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","option_r1","QuestionComponent","constructor","route","router","quizService","responses","studentName","feedback","ngOnInit","quizId","snapshot","paramMap","get","getQuiz","subscribe","quizData","quiz","error","console","selectOption","questionId","optionIndex","submitAttempt","attemptData","id","_","ɵɵdirectiveInject","i1","ActivatedRoute","Router","i2","QuizService","_2","selectors","decls","vars","consts","template","QuestionComponent_Template","rf","ctx","ɵɵtemplate","QuestionComponent_li_4_Template","ɵɵtextInterpolate","question","text","ɵɵproperty","options"],"sourceRoot":"","sources":["C:\\Users\\Rahma\\Desktop\\Testing\\CoursZeloFront\\CoursZelo\\src\\app\\Questions\\question\\question.component.html","C:\\Users\\Rahma\\Desktop\\Testing\\CoursZeloFront\\CoursZelo\\src\\app\\Questions\\question\\question.component.ts"],"sourcesContent":["<div class=\"question\">\r\n    <p>{{ question.text }}</p>\r\n    <ul>\r\n      <li *ngFor=\"let option of question.options; let i = index\" (click)=\"selectAnswer(i)\">\r\n        {{ option }}\r\n      </li>\r\n    </ul>\r\n</div>\r\n","\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { QuizService } from 'src/app/QuizService/quiz.service';\r\n\r\n@Component({\r\n  selector: 'app-question',\r\n  templateUrl: './question.component.html',\r\n  styleUrls: ['./question.component.css']\r\n})\r\nexport class QuestionComponent {\r\n  quiz: any; // Replace 'any' with the proper type for your quiz\r\n  responses: { [key: string]: number } = {}; // Stores the student's selected options\r\n  studentName: string = '';\r\n  feedback: string = '';\r\n\r\n  constructor(\r\n    private route: ActivatedRoute, \r\n    private router: Router, \r\n    private quizService: QuizService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    const quizId = this.route.snapshot.paramMap.get('quizId');\r\n    if (quizId) {\r\n      this.quizService.getQuiz(quizId).subscribe(\r\n        (quizData) => {\r\n          this.quiz = quizData;\r\n        },\r\n        (error) => {\r\n          console.error('Error loading quiz', error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  selectOption(questionId: string, optionIndex: number): void {\r\n    this.responses[questionId] = optionIndex;\r\n  }\r\n\r\n  submitAttempt(): void {\r\n    const attemptData = {\r\n      quizId: this.quiz.id,\r\n      studentName: this.studentName,\r\n      responses: this.responses,\r\n      feedback: this.feedback\r\n    };\r\n    // Call to the service to submit the attempt\r\n    // Assuming you have a method in your QuizService to handle this\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}