{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction QuestionComponent_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 2);\n    i0.ɵɵlistener(\"click\", function QuestionComponent_li_4_Template_li_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const i_r2 = restoredCtx.index;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.selectAnswer(i_r2));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r1, \" \");\n  }\n}\nexport class QuestionComponent {\n  constructor() {\n    this.answerSelected = new EventEmitter(); // Event emitter for selected answer\n  }\n  selectAnswer(optionIndex) {\n    this.answerSelected.emit(optionIndex); // Emit the selected answer index\n  }\n  static #_ = this.ɵfac = function QuestionComponent_Factory(t) {\n    return new (t || QuestionComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: QuestionComponent,\n    selectors: [[\"app-question\"]],\n    inputs: {\n      question: \"question\"\n    },\n    outputs: {\n      answerSelected: \"answerSelected\"\n    },\n    decls: 5,\n    vars: 2,\n    consts: [[1, \"question\"], [3, \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\"]],\n    template: function QuestionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"p\");\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"ul\");\n        i0.ɵɵtemplate(4, QuestionComponent_li_4_Template, 2, 1, \"li\", 1);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.question.text);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.question.options);\n      }\n    },\n    dependencies: [i1.NgForOf],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJxdWVzdGlvbi5jb21wb25lbnQuY3NzIn0= */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvUXVlc3Rpb25zL3F1ZXN0aW9uL3F1ZXN0aW9uLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLG9LQUFvSyIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"AACA,SAAwBA,YAAY,QAAQ,eAAe;;;;;;ICErDC,EAAA,CAAAC,cAAA,YAAqF;IAA1BD,EAAA,CAAAE,UAAA,mBAAAC,oDAAA;MAAA,MAAAC,WAAA,GAAAJ,EAAA,CAAAK,aAAA,CAAAC,GAAA;MAAA,MAAAC,IAAA,GAAAH,WAAA,CAAAI,KAAA;MAAA,MAAAC,MAAA,GAAAT,EAAA,CAAAU,aAAA;MAAA,OAASV,EAAA,CAAAW,WAAA,CAAAF,MAAA,CAAAG,YAAA,CAAAL,IAAA,CAAe;IAAA,EAAC;IAClFP,EAAA,CAAAa,MAAA,GACF;IAAAb,EAAA,CAAAc,YAAA,EAAK;;;;IADHd,EAAA,CAAAe,SAAA,GACF;IADEf,EAAA,CAAAgB,kBAAA,MAAAC,SAAA,MACF;;;ADIN,OAAM,MAAOC,iBAAiB;EAN9BC,YAAA;IAQY,KAAAC,cAAc,GAAG,IAAIrB,YAAY,EAAU,CAAC,CAAC;;EAEvDa,YAAYA,CAACS,WAAmB;IAC9B,IAAI,CAACD,cAAc,CAACE,IAAI,CAACD,WAAW,CAAC,CAAC,CAAC;EACzC;EAAC,QAAAE,CAAA;qBANUL,iBAAiB;EAAA;EAAA,QAAAM,EAAA;UAAjBN,iBAAiB;IAAAO,SAAA;IAAAC,MAAA;MAAAC,QAAA;IAAA;IAAAC,OAAA;MAAAR,cAAA;IAAA;IAAAS,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,2BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCT9BlC,EAAA,CAAAC,cAAA,aAAsB;QACfD,EAAA,CAAAa,MAAA,GAAmB;QAAAb,EAAA,CAAAc,YAAA,EAAI;QAC1Bd,EAAA,CAAAC,cAAA,SAAI;QACFD,EAAA,CAAAoC,UAAA,IAAAC,+BAAA,gBAEK;QACPrC,EAAA,CAAAc,YAAA,EAAK;;;QALFd,EAAA,CAAAe,SAAA,GAAmB;QAAnBf,EAAA,CAAAsC,iBAAA,CAAAH,GAAA,CAAAR,QAAA,CAAAY,IAAA,CAAmB;QAEGvC,EAAA,CAAAe,SAAA,GAAqB;QAArBf,EAAA,CAAAwC,UAAA,YAAAL,GAAA,CAAAR,QAAA,CAAAc,OAAA,CAAqB","names":["EventEmitter","i0","ɵɵelementStart","ɵɵlistener","QuestionComponent_li_4_Template_li_click_0_listener","restoredCtx","ɵɵrestoreView","_r4","i_r2","index","ctx_r3","ɵɵnextContext","ɵɵresetView","selectAnswer","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","option_r1","QuestionComponent","constructor","answerSelected","optionIndex","emit","_","_2","selectors","inputs","question","outputs","decls","vars","consts","template","QuestionComponent_Template","rf","ctx","ɵɵtemplate","QuestionComponent_li_4_Template","ɵɵtextInterpolate","text","ɵɵproperty","options"],"sourceRoot":"","sources":["C:\\Users\\Rahma\\Desktop\\Testing\\CoursZeloFront\\CoursZelo\\src\\app\\Questions\\question\\question.component.ts","C:\\Users\\Rahma\\Desktop\\Testing\\CoursZeloFront\\CoursZelo\\src\\app\\Questions\\question\\question.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-question',\r\n\r\n  templateUrl: './question.component.html',\r\n  styleUrls:['./question.component.css'] \r\n})\r\nexport class QuestionComponent {\r\n  @Input() question: any;\r\n  @Output() answerSelected = new EventEmitter<number>(); // Event emitter for selected answer\r\n\r\n  selectAnswer(optionIndex: number): void {\r\n    this.answerSelected.emit(optionIndex); // Emit the selected answer index\r\n  }\r\n\r\n}\r\n","<div class=\"question\">\r\n    <p>{{ question.text }}</p>\r\n    <ul>\r\n      <li *ngFor=\"let option of question.options; let i = index\" (click)=\"selectAnswer(i)\">\r\n        {{ option }}\r\n      </li>\r\n    </ul>\r\n  </div>\r\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}