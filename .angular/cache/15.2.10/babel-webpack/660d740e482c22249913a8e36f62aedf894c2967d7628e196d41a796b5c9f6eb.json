{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet AttemptComponent = class AttemptComponent {\n  constructor(quizService, route) {\n    this.quizService = quizService;\n    this.route = route;\n    this.studentResponses = {}; // Utilisez number si vous enregistrez des indices\n    this.studentName = ''; // Nom de l'étudiant\n    this.feedback = ''; // Feedback de l'étudiant\n  }\n  ngOnInit() {\n    const quizId = this.route.snapshot.paramMap.get('id');\n    if (quizId) {\n      this.quizService.getQuizById(quizId).subscribe(quiz => this.quiz = quiz, error => console.error('Error loading quiz:', error));\n    }\n  }\n  onAnswer(questionId, optionIndex) {\n    this.studentResponses[questionId] = optionIndex;\n  }\n  submitAttempt() {\n    const attempt = {\n      quizId: this.quiz?.id,\n      responses: this.studentResponses,\n      username: this.studentName,\n      feedback: this.feedback,\n      attemptDate: new Date(),\n      score: this.calculateScore() // Supposons que vous avez une fonction pour calculer le score\n    };\n    this.quizService.submitAttempt(attempt).subscribe(result => console.log('Attempt submitted successfully', result), error => console.error('Error submitting attempt', error));\n  }\n  // Supposons que vous avez une méthode pour calculer le score\n  calculateScore() {\n    let score = 0;\n    // Logique de calcul du score basée sur les réponses de l'étudiant\n    return score;\n  }\n};\nAttemptComponent = __decorate([Component({\n  selector: 'app-attempts',\n  templateUrl: './attempts.component.html',\n  styleUrls: ['./attempts.component.css']\n})], AttemptComponent);\nexport { AttemptComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAqB1C,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAM3BC,YAAoBC,WAAwB,EAAUC,KAAqB;IAAvD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,KAAK,GAALA,KAAK;IAJ3D,KAAAC,gBAAgB,GAAqC,EAAE,CAAC,CAAE;IAC1D,KAAAC,WAAW,GAAW,EAAE,CAAC,CAAE;IAC3B,KAAAC,QAAQ,GAAW,EAAE,CAAC,CAAE;EAEsD;EAE9EC,QAAQA,CAAA;IACN,MAAMC,MAAM,GAAG,IAAI,CAACL,KAAK,CAACM,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC;IACrD,IAAIH,MAAM,EAAE;MACV,IAAI,CAACN,WAAW,CAACU,WAAW,CAACJ,MAAM,CAAC,CAACK,SAAS,CAC3CC,IAAU,IAAK,IAAI,CAACA,IAAI,GAAGA,IAAI,EAC/BC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC,CACvD;;EAEL;EAEAE,QAAQA,CAACC,UAAkB,EAAEC,WAAmB;IAC9C,IAAI,CAACf,gBAAgB,CAACc,UAAU,CAAC,GAAGC,WAAW;EACjD;EAEAC,aAAaA,CAAA;IACX,MAAMC,OAAO,GAAG;MACdb,MAAM,EAAE,IAAI,CAACM,IAAI,EAAEQ,EAAE;MACrBC,SAAS,EAAE,IAAI,CAACnB,gBAAgB;MAChCoB,QAAQ,EAAE,IAAI,CAACnB,WAAW;MAC1BC,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBmB,WAAW,EAAE,IAAIC,IAAI,EAAE;MACvBC,KAAK,EAAE,IAAI,CAACC,cAAc,EAAE,CAAE;KAC/B;IAED,IAAI,CAAC1B,WAAW,CAACkB,aAAa,CAACC,OAAO,CAAC,CAACR,SAAS,CAC/CgB,MAAM,IAAIb,OAAO,CAACc,GAAG,CAAC,gCAAgC,EAAED,MAAM,CAAC,EAC/Dd,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC,CAC1D;EACH;EAEA;EACQa,cAAcA,CAAA;IACpB,IAAID,KAAK,GAAG,CAAC;IACb;IACA,OAAOA,KAAK;EACd;CACD;AA5CY3B,gBAAgB,GAAA+B,UAAA,EAL5BhC,SAAS,CAAC;EACTiC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,GACWlC,gBAAgB,CA4C5B;SA5CYA,gBAAgB","names":["Component","AttemptComponent","constructor","quizService","route","studentResponses","studentName","feedback","ngOnInit","quizId","snapshot","paramMap","get","getQuizById","subscribe","quiz","error","console","onAnswer","questionId","optionIndex","submitAttempt","attempt","id","responses","username","attemptDate","Date","score","calculateScore","result","log","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Rahma\\Desktop\\Testing\\CoursZeloFront\\CoursZelo\\src\\app\\Attempt\\attempts\\attempts.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { QuizService } from 'src/app/QuizService/quiz.service';\r\n\r\ninterface Question {\r\n  id: string;\r\n  text: string;\r\n  options: string[];\r\n}\r\n\r\ninterface Quiz {\r\n  id: string;\r\n  title: string;\r\n  questions: Question[];\r\n}\r\n\r\n@Component({\r\n  selector: 'app-attempts',\r\n  templateUrl: './attempts.component.html',\r\n  styleUrls: ['./attempts.component.css']\r\n})\r\nexport class AttemptComponent implements OnInit {\r\n  quiz?: Quiz;\r\n  studentResponses: { [questionId: string]: number } = {};  // Utilisez number si vous enregistrez des indices\r\n  studentName: string = '';  // Nom de l'étudiant\r\n  feedback: string = '';  // Feedback de l'étudiant\r\n\r\n  constructor(private quizService: QuizService, private route: ActivatedRoute) {}\r\n\r\n  ngOnInit(): void {\r\n    const quizId = this.route.snapshot.paramMap.get('id');\r\n    if (quizId) {\r\n      this.quizService.getQuizById(quizId).subscribe(\r\n        (quiz: Quiz) => this.quiz = quiz,\r\n        (error) => console.error('Error loading quiz:', error)\r\n      );\r\n    }\r\n  }\r\n\r\n  onAnswer(questionId: string, optionIndex: number): void {\r\n    this.studentResponses[questionId] = optionIndex;\r\n  }\r\n\r\n  submitAttempt(): void {\r\n    const attempt = {\r\n      quizId: this.quiz?.id,\r\n      responses: this.studentResponses,\r\n      username: this.studentName,\r\n      feedback: this.feedback,\r\n      attemptDate: new Date(),\r\n      score: this.calculateScore()  // Supposons que vous avez une fonction pour calculer le score\r\n    };\r\n\r\n    this.quizService.submitAttempt(attempt).subscribe(\r\n      result => console.log('Attempt submitted successfully', result),\r\n      error => console.error('Error submitting attempt', error)\r\n    );\r\n  }\r\n\r\n  // Supposons que vous avez une méthode pour calculer le score\r\n  private calculateScore(): number {\r\n    let score = 0;\r\n    // Logique de calcul du score basée sur les réponses de l'étudiant\r\n    return score;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}