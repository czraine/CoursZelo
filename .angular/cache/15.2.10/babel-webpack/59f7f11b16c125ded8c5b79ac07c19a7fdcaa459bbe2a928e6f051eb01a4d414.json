{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/QuizService/quiz.service\";\nimport * as i2 from \"@angular/router\";\nexport class AttemptComponent {\n  constructor(quizService, route) {\n    this.quizService = quizService;\n    this.route = route;\n    this.studentResponses = {};\n    this.studentName = '';\n    this.feedback = '';\n  }\n  ngOnInit() {\n    const quizId = this.route.snapshot.paramMap.get('id');\n    if (quizId) {\n      this.quizService.getQuizById(quizId).subscribe(quiz => {\n        this.quiz = quiz;\n      });\n    }\n  }\n  submitAttempt() {\n    const attempt = {\n      quizId: this.quiz.id,\n      username: this.studentName,\n      responses: this.studentResponses,\n      feedback: this.feedback,\n      attemptDate: new Date(),\n      score: 0 // Le score pourrait être calculé côté serveur\n    };\n    this.quizService.submitAttempt(attempt).subscribe(result => console.log('Attempt submitted successfully', result), error => console.error('Error submitting attempt', error));\n  }\n  selectAnswer(questionId, optionIndex) {\n    this.studentResponses[questionId] = optionIndex.toString();\n  }\n  static #_ = this.ɵfac = function AttemptComponent_Factory(t) {\n    return new (t || AttemptComponent)(i0.ɵɵdirectiveInject(i1.QuizService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AttemptComponent,\n    selectors: [[\"app-attempts\"]],\n    decls: 2,\n    vars: 0,\n    template: function AttemptComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"attempts works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhdHRlbXB0cy5jb21wb25lbnQuY3NzIn0= */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvQXR0ZW1wdC9hdHRlbXB0cy9hdHRlbXB0cy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxvS0FBb0siLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"mappings":";;;AAYA,OAAM,MAAOA,gBAAgB;EAM3BC,YACUC,WAAwB,EACxBC,KAAqB;IADrB,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,KAAK,GAALA,KAAK;IANf,KAAAC,gBAAgB,GAAqC,EAAE;IACvD,KAAAC,WAAW,GAAW,EAAE;IACxB,KAAAC,QAAQ,GAAW,EAAE;EAKlB;EAEHC,QAAQA,CAAA;IACN,MAAMC,MAAM,GAAG,IAAI,CAACL,KAAK,CAACM,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC;IACrD,IAAIH,MAAM,EAAE;MACV,IAAI,CAACN,WAAW,CAACU,WAAW,CAACJ,MAAM,CAAC,CAACK,SAAS,CAACC,IAAI,IAAG;QACpD,IAAI,CAACA,IAAI,GAAGA,IAAI;MAClB,CAAC,CAAC;;EAEN;EAEAC,aAAaA,CAAA;IACX,MAAMC,OAAO,GAAG;MACdR,MAAM,EAAE,IAAI,CAACM,IAAI,CAACG,EAAE;MACpBC,QAAQ,EAAE,IAAI,CAACb,WAAW;MAC1Bc,SAAS,EAAE,IAAI,CAACf,gBAAgB;MAChCE,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBc,WAAW,EAAE,IAAIC,IAAI,EAAE;MACvBC,KAAK,EAAE,CAAC,CAAE;KACX;IAED,IAAI,CAACpB,WAAW,CAACa,aAAa,CAACC,OAAO,CAAC,CAACH,SAAS,CAC/CU,MAAM,IAAIC,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEF,MAAM,CAAC,EAC/DG,KAAK,IAAIF,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC,CAC1D;EACH;EAEAC,YAAYA,CAACC,UAAkB,EAAEC,WAAmB;IAClD,IAAI,CAACzB,gBAAgB,CAACwB,UAAU,CAAC,GAAGC,WAAW,CAACC,QAAQ,EAAE;EAC5D;EAAC,QAAAC,CAAA;qBAtCU/B,gBAAgB,EAAAgC,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,cAAA;EAAA;EAAA,QAAAC,EAAA;UAAhBtC,gBAAgB;IAAAuC,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,QAAA,WAAAC,0BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCZ7BZ,EAAA,CAAAc,cAAA,QAAG;QAAAd,EAAA,CAAAe,MAAA,sBAAe;QAAAf,EAAA,CAAAgB,YAAA,EAAI","names":["AttemptComponent","constructor","quizService","route","studentResponses","studentName","feedback","ngOnInit","quizId","snapshot","paramMap","get","getQuizById","subscribe","quiz","submitAttempt","attempt","id","username","responses","attemptDate","Date","score","result","console","log","error","selectAnswer","questionId","optionIndex","toString","_","i0","ɵɵdirectiveInject","i1","QuizService","i2","ActivatedRoute","_2","selectors","decls","vars","template","AttemptComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sourceRoot":"","sources":["C:\\Users\\Rahma\\Desktop\\Testing\\CoursZeloFront\\CoursZelo\\src\\app\\Attempt\\attempts\\attempts.component.ts","C:\\Users\\Rahma\\Desktop\\Testing\\CoursZeloFront\\CoursZelo\\src\\app\\Attempt\\attempts\\attempts.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { QuizService } from 'src/app/QuizService/quiz.service';\r\ninterface Question {\r\n\r\n@Component({\r\n  selector: 'app-attempts',\r\n  templateUrl: './attempts.component.html',\r\n  styleUrls: ['./attempts.component.css']\r\n})\r\n\r\n\r\nexport class AttemptComponent implements OnInit {\r\n  quiz: any;  // Utiliser une interface appropriée\r\n  studentResponses: { [questionId: string]: string } = {};\r\n  studentName: string = '';\r\n  feedback: string = '';\r\n\r\n  constructor(\r\n    private quizService: QuizService, \r\n    private route: ActivatedRoute\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    const quizId = this.route.snapshot.paramMap.get('id');\r\n    if (quizId) {\r\n      this.quizService.getQuizById(quizId).subscribe(quiz => {\r\n        this.quiz = quiz;\r\n      });\r\n    }\r\n  }\r\n\r\n  submitAttempt(): void {\r\n    const attempt = {\r\n      quizId: this.quiz.id,\r\n      username: this.studentName,\r\n      responses: this.studentResponses,\r\n      feedback: this.feedback,\r\n      attemptDate: new Date(),  // La date pourrait être définie côté serveur\r\n      score: 0  // Le score pourrait être calculé côté serveur\r\n    };\r\n\r\n    this.quizService.submitAttempt(attempt).subscribe(\r\n      result => console.log('Attempt submitted successfully', result),\r\n      error => console.error('Error submitting attempt', error)\r\n    );\r\n  }\r\n\r\n  selectAnswer(questionId: string, optionIndex: number): void {\r\n    this.studentResponses[questionId] = optionIndex.toString();\r\n  }\r\n}","<p>attempts works!</p>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}