{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/QuizService/quiz.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction QuestionComponent_div_0_div_4_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\")(1, \"label\")(2, \"input\", 6);\n    i0.ɵɵlistener(\"click\", function QuestionComponent_div_0_div_4_li_4_Template_input_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const oIndex_r5 = restoredCtx.index;\n      const question_r2 = i0.ɵɵnextContext().$implicit;\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r6.selectOption(question_r2.idQuestion, oIndex_r5));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const option_r4 = ctx.$implicit;\n    const question_r2 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"name\", \"question-\", question_r2.idQuestion, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r4, \" \");\n  }\n}\nfunction QuestionComponent_div_0_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ul\");\n    i0.ɵɵtemplate(4, QuestionComponent_div_0_div_4_li_4_Template, 4, 2, \"li\", 2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const question_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(question_r2.text);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", question_r2.options);\n  }\n}\nfunction QuestionComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"form\", 1);\n    i0.ɵɵlistener(\"ngSubmit\", function QuestionComponent_div_0_Template_form_ngSubmit_3_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.submitAttempt());\n    });\n    i0.ɵɵtemplate(4, QuestionComponent_div_0_div_4_Template, 5, 2, \"div\", 2);\n    i0.ɵɵelementStart(5, \"div\")(6, \"label\");\n    i0.ɵɵtext(7, \" Your Name: \");\n    i0.ɵɵelementStart(8, \"input\", 3);\n    i0.ɵɵlistener(\"ngModelChange\", function QuestionComponent_div_0_Template_input_ngModelChange_8_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.studentName = $event);\n    });\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(9, \"div\")(10, \"label\");\n    i0.ɵɵtext(11, \" Feedback: \");\n    i0.ɵɵelementStart(12, \"textarea\", 4);\n    i0.ɵɵlistener(\"ngModelChange\", function QuestionComponent_div_0_Template_textarea_ngModelChange_12_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.feedback = $event);\n    });\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(13, \"button\", 5);\n    i0.ɵɵtext(14, \"Submit Attempt\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.quiz.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.quiz.questions);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.studentName);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.feedback);\n  }\n}\nexport class QuestionComponent {\n  constructor(route, router, quizService) {\n    this.route = route;\n    this.router = router;\n    this.quizService = quizService;\n    this.responses = {}; // Stores the student's selected options\n    this.studentName = '';\n    this.feedback = '';\n  }\n  ngOnInit() {\n    const quizId = this.route.snapshot.paramMap.get('quizId');\n    if (quizId) {\n      this.quizService.getQuiz(quizId).subscribe(quizData => {\n        this.quiz = quizData;\n      }, error => {\n        console.error('Error loading quiz', error);\n      });\n    }\n  }\n  selectOption(questionId, optionIndex) {\n    this.responses[questionId] = optionIndex;\n  }\n  submitAttempt() {\n    const attemptData = {\n      quizId: this.quiz.id,\n      studentName: this.studentName,\n      responses: this.responses,\n      feedback: this.feedback\n    };\n    // Call to the service to submit the attempt\n    // Assuming you have a method in your QuizService to handle this\n  }\n  static #_ = this.ɵfac = function QuestionComponent_Factory(t) {\n    return new (t || QuestionComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.QuizService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: QuestionComponent,\n    selectors: [[\"app-question\"]],\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [3, \"ngSubmit\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"text\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\"], [\"type\", \"radio\", 3, \"name\", \"click\"]],\n    template: function QuestionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, QuestionComponent_div_0_Template, 15, 4, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.quiz);\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i4.NgModel, i4.NgForm],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJxdWVzdGlvbi5jb21wb25lbnQuY3NzIn0= */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvUXVlc3Rpb25zL3F1ZXN0aW9uL3F1ZXN0aW9uLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLG9LQUFvSyIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["i0","ɵɵelementStart","ɵɵlistener","QuestionComponent_div_0_div_4_li_4_Template_input_click_2_listener","restoredCtx","ɵɵrestoreView","_r8","oIndex_r5","index","question_r2","ɵɵnextContext","$implicit","ctx_r6","ɵɵresetView","selectOption","idQuestion","ɵɵelementEnd","ɵɵtext","ɵɵadvance","ɵɵpropertyInterpolate1","ɵɵtextInterpolate1","option_r4","ɵɵtemplate","QuestionComponent_div_0_div_4_li_4_Template","ɵɵtextInterpolate","text","ɵɵproperty","options","QuestionComponent_div_0_Template_form_ngSubmit_3_listener","_r11","ctx_r10","submitAttempt","QuestionComponent_div_0_div_4_Template","QuestionComponent_div_0_Template_input_ngModelChange_8_listener","$event","ctx_r12","studentName","QuestionComponent_div_0_Template_textarea_ngModelChange_12_listener","ctx_r13","feedback","ctx_r0","quiz","title","questions","QuestionComponent","constructor","route","router","quizService","responses","ngOnInit","quizId","snapshot","paramMap","get","getQuiz","subscribe","quizData","error","console","questionId","optionIndex","attemptData","id","_","ɵɵdirectiveInject","i1","ActivatedRoute","Router","i2","QuizService","_2","selectors","decls","vars","consts","template","QuestionComponent_Template","rf","ctx","QuestionComponent_div_0_Template"],"sourceRoot":"","sources":["C:\\Users\\Rahma\\Desktop\\Testing\\CoursZeloFront\\CoursZelo\\src\\app\\Questions\\question\\question.component.html","C:\\Users\\Rahma\\Desktop\\Testing\\CoursZeloFront\\CoursZelo\\src\\app\\Questions\\question\\question.component.ts"],"sourcesContent":["<div *ngIf=\"quiz\">\r\n    <h2>{{ quiz.title }}</h2>\r\n    <form (ngSubmit)=\"submitAttempt()\">\r\n      <div *ngFor=\"let question of quiz.questions\">\r\n        <p>{{ question.text }}</p>\r\n        <ul>\r\n          <li *ngFor=\"let option of question.options; let oIndex = index\">\r\n            <label>\r\n              <input type=\"radio\" name=\"question-{{question.idQuestion}}\" (click)=\"selectOption(question.idQuestion, oIndex)\">\r\n              {{ option }}\r\n            </label>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div>\r\n        <label>\r\n          Your Name:\r\n          <input type=\"text\" [(ngModel)]=\"studentName\" required>\r\n        </label>\r\n      </div>\r\n      <div>\r\n        <label>\r\n          Feedback:\r\n          <textarea [(ngModel)]=\"feedback\"></textarea>\r\n        </label>\r\n      </div>\r\n      <button type=\"submit\">Submit Attempt</button>\r\n    </form>\r\n  </div>\r\n  ","\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { QuizService } from 'src/app/QuizService/quiz.service';\r\n\r\n@Component({\r\n  selector: 'app-question',\r\n  templateUrl: './question.component.html',\r\n  styleUrls: ['./question.component.css']\r\n})\r\nexport class QuestionComponent {\r\n  quiz: any; // Replace 'any' with the proper type for your quiz\r\n  responses: { [key: string]: number } = {}; // Stores the student's selected options\r\n  studentName: string = '';\r\n  feedback: string = '';\r\n\r\n  constructor(\r\n    private route: ActivatedRoute, \r\n    private router: Router, \r\n    private quizService: QuizService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    const quizId = this.route.snapshot.paramMap.get('quizId');\r\n    if (quizId) {\r\n      this.quizService.getQuiz(quizId).subscribe(\r\n        (quizData) => {\r\n          this.quiz = quizData;\r\n        },\r\n        (error) => {\r\n          console.error('Error loading quiz', error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  selectOption(questionId: string, optionIndex: number): void {\r\n    this.responses[questionId] = optionIndex;\r\n  }\r\n\r\n  submitAttempt(): void {\r\n    const attemptData = {\r\n      quizId: this.quiz.id,\r\n      studentName: this.studentName,\r\n      responses: this.responses,\r\n      feedback: this.feedback\r\n    };\r\n    // Call to the service to submit the attempt\r\n    // Assuming you have a method in your QuizService to handle this\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}