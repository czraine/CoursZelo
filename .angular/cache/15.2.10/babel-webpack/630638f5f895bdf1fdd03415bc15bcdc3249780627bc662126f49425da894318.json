{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ModuleListComponent = class ModuleListComponent {\n  constructor(cdRef, serviceModule) {\n    this.cdRef = cdRef;\n    this.serviceModule = serviceModule;\n    this.list = [];\n    this.modalDisplay = false;\n    this.currentModule = null;\n    this.modalMode = 'view';\n  }\n  ngOnInit() {\n    this.getAllModules();\n  }\n  openModal(module, mode = 'view') {\n    this.currentModule = module;\n    this.modalMode = mode;\n    this.modalDisplay = true;\n  }\n  closeModal() {\n    this.modalDisplay = false;\n  }\n  saveChanges() {\n    if (!this.currentModule || !this.currentModule.ModuleId) {\n      console.log(\"No module selected or module ID is missing\");\n      return;\n    }\n    this.updateModule(this.currentModule.ModuleId, this.currentModule);\n  }\n  confirmDelete(md) {\n    const isConfirmed = confirm('Are you sure you want to delete this module?');\n    if (isConfirmed) {\n      this.deleteModule(md);\n    }\n  }\n  deleteModule(md) {\n    this.serviceModule.deleteModule(md.ModuleId).subscribe({\n      next: () => {\n        alert(md.moduleName);\n        console.log(\"Module deleted successfully\");\n        this.getAllModules();\n      },\n      error: error => {\n        console.error(\"Error deleting module\", error);\n      }\n    });\n  }\n  getAllModules() {\n    this.serviceModule.getModules().subscribe({\n      next: modules => {\n        this.list = modules;\n        console.log('List of Modules updated:', this.list);\n        this.cdRef.detectChanges();\n      },\n      error: error => {\n        console.error('Error fetching modules', error);\n      }\n    });\n  }\n  updateModule(moduleId, newData) {\n    this.serviceModule.updateModule(moduleId, newData).subscribe({\n      next: response => {\n        console.log('Module Updated successfully', response);\n        this.getAllModules();\n      },\n      error: error => {\n        console.error('There was an error!', error);\n      }\n    });\n  }\n  getModuleById(moduleId) {\n    this.serviceModule.getModuleById(moduleId).subscribe({\n      next: module => {\n        console.log('Module Details:', module);\n        this.currentModule = module;\n      },\n      error: error => {\n        console.error('There was an error!', error);\n      }\n    });\n  }\n  selectModuleForEdit(moduleId) {\n    this.getModuleById(moduleId);\n    this.openModal(this.currentModule, 'edit');\n  }\n};\nModuleListComponent = __decorate([Component({\n  selector: 'app-module-list',\n  templateUrl: './module-list.component.html',\n  styleUrls: ['./module-list.component.css']\n})], ModuleListComponent);\nexport { ModuleListComponent };","map":{"version":3,"mappings":"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","names":["Component","ModuleListComponent","constructor","cdRef","serviceModule","list","modalDisplay","currentModule","modalMode","ngOnInit","getAllModules","openModal","module","mode","closeModal","saveChanges","ModuleId","console","log","updateModule","confirmDelete","md","isConfirmed","confirm","deleteModule","subscribe","next","alert","moduleName","error","getModules","modules","detectChanges","moduleId","newData","response","getModuleById","selectModuleForEdit","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Rahma\\Desktop\\Testing\\CoursZeloFront\\CoursZelo\\src\\app\\front\\module-list\\module-list.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { ServiceModuleService } from 'src/app/services/service-module.service';\r\nimport { ChangeDetectorRef } from '@angular/core';\r\nimport { Module } from 'src/app/models/Module';\r\n\r\n@Component({\r\n  selector: 'app-module-list',\r\n  templateUrl: './module-list.component.html',\r\n  styleUrls: ['./module-list.component.css']\r\n})\r\nexport class ModuleListComponent {\r\n  list: Module[] = [];\r\n  modalDisplay = false;\r\n  currentModule: Module | null = null;\r\n  modalMode: 'edit' | 'view' = 'view';\r\n\r\n  constructor(private cdRef: ChangeDetectorRef, private serviceModule: ServiceModuleService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.getAllModules();\r\n  }\r\n\r\n  openModal(module: any, mode: 'edit' | 'view' = 'view'): void {\r\n    this.currentModule = module;\r\n    this.modalMode = mode;\r\n    this.modalDisplay = true;\r\n  }\r\n\r\n  closeModal(): void {\r\n    this.modalDisplay = false;\r\n  }\r\n\r\n  saveChanges(): void {\r\n    if (!this.currentModule || !this.currentModule.ModuleId) {\r\n      console.log(\"No module selected or module ID is missing\");\r\n      return;\r\n    }\r\n    this.updateModule(this.currentModule.ModuleId, this.currentModule);\r\n  }\r\n\r\n  confirmDelete(md: Module): void {\r\n    const isConfirmed = confirm('Are you sure you want to delete this module?');\r\n    if (isConfirmed) {\r\n      this.deleteModule(md);\r\n    }\r\n  }\r\n\r\n  deleteModule(md: Module): void {\r\n    this.serviceModule.deleteModule(md.ModuleId).subscribe({\r\n      next: () => { \r\n        alert(md.moduleName)\r\n        console.log(\"Module deleted successfully\");\r\n        this.getAllModules();\r\n      },\r\n      error: (error) => {\r\n        console.error(\"Error deleting module\", error);\r\n      }\r\n    });\r\n  }\r\n\r\n  getAllModules(): void {\r\n    this.serviceModule.getModules().subscribe({\r\n      next: (modules) => {\r\n        this.list = modules;\r\n        console.log('List of Modules updated:', this.list);\r\n        this.cdRef.detectChanges();\r\n      },\r\n      error: (error) => {\r\n        console.error('Error fetching modules', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  updateModule(moduleId: string, newData: any): void {\r\n    this.serviceModule.updateModule(moduleId, newData).subscribe({\r\n      next: (response) => {\r\n        console.log('Module Updated successfully', response);\r\n        this.getAllModules();\r\n      },\r\n      error: (error) => {\r\n        console.error('There was an error!', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  getModuleById(moduleId: string): void {\r\n    this.serviceModule.getModuleById(moduleId).subscribe({\r\n      next: (module) => {\r\n        console.log('Module Details:', module);\r\n        this.currentModule = module;\r\n      },\r\n      error: (error) => {\r\n        console.error('There was an error!', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  selectModuleForEdit(moduleId: string): void {\r\n    this.getModuleById(moduleId);\r\n    this.openModal(this.currentModule, 'edit');\r\n  }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}