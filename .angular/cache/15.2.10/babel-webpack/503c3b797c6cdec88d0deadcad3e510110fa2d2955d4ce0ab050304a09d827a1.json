{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet QuizAttemptComponent = class QuizAttemptComponent {\n  constructor(route, quizService) {\n    this.route = route;\n    this.quizService = quizService;\n    this.studentResponses = {}; // Maps question ID to the student's selected option index\n    this.studentName = ''; // To hold the student's name\n    this.feedback = ''; // To hold any feedback from the student\n  }\n  ngOnInit() {\n    const quizId = this.route.snapshot.paramMap.get('id');\n    if (quizId) {\n      this.quizService.getQuizById(quizId).subscribe(data => {\n        this.quiz = data;\n        // Initialize responses for each question\n        this.quiz.questions.forEach(question => {\n          this.studentResponses[question.id] = -1; // -1 means no option selected\n        });\n      }, error => {\n        console.error('Error loading quiz', error);\n        // Handle loading error\n      });\n    } else {\n      console.error('Quiz ID not provided');\n      // Handle missing quiz ID error\n    }\n  }\n  selectAnswer(questionId, optionIndex) {\n    this.studentResponses[questionId] = optionIndex;\n  }\n  submitAttempt() {\n    const attemptData = {\n      quizId: this.quiz.id,\n      studentName: this.studentName,\n      responses: this.studentResponses,\n      feedback: this.feedback\n    };\n    console.log('Submitting the following attempt:', attemptData);\n    // Assuming your QuizService has a method to submit the attempt\n    this.quizService.submitAttempt(attemptData).subscribe(result => {\n      console.log('Quiz attempt submitted successfully:', result);\n      // Redirect to a confirmation page or display a success message\n    }, error => {\n      console.error('Error submitting quiz attempt:', error);\n      // Handle submission error\n    });\n  }\n};\nQuizAttemptComponent = __decorate([Component({\n  selector: 'app-quiz-attempt',\n  templateUrl: './quiz-attempt.component.html',\n  styleUrls: ['./quiz-attempt.component.css']\n})], QuizAttemptComponent);\nexport { QuizAttemptComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAsB1C,IAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAM/BC,YACUC,KAAqB,EACrBC,WAAwB;IADxB,KAAAD,KAAK,GAALA,KAAK;IACL,KAAAC,WAAW,GAAXA,WAAW;IANrB,KAAAC,gBAAgB,GAAqC,EAAE,CAAC,CAAC;IACzD,KAAAC,WAAW,GAAW,EAAE,CAAC,CAAC;IAC1B,KAAAC,QAAQ,GAAW,EAAE,CAAC,CAAC;EAKpB;EAEHC,QAAQA,CAAA;IACN,MAAMC,MAAM,GAAG,IAAI,CAACN,KAAK,CAACO,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC;IACrD,IAAIH,MAAM,EAAE;MACV,IAAI,CAACL,WAAW,CAACS,WAAW,CAACJ,MAAM,CAAC,CAACK,SAAS,CAC3CC,IAAU,IAAI;QACb,IAAI,CAACC,IAAI,GAAGD,IAAI;QAChB;QACA,IAAI,CAACC,IAAI,CAACC,SAAS,CAACC,OAAO,CAACC,QAAQ,IAAG;UACrC,IAAI,CAACd,gBAAgB,CAACc,QAAQ,CAACC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC3C,CAAC,CAAC;MACJ,CAAC,EACAC,KAAK,IAAI;QACRC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;QAC1C;MACF,CAAC,CACF;KACF,MAAM;MACLC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAC;MACrC;;EAEJ;EAEAE,YAAYA,CAACC,UAAkB,EAAEC,WAAmB;IAClD,IAAI,CAACpB,gBAAgB,CAACmB,UAAU,CAAC,GAAGC,WAAW;EACjD;EAEAC,aAAaA,CAAA;IACX,MAAMC,WAAW,GAAG;MAClBlB,MAAM,EAAE,IAAI,CAACO,IAAI,CAACI,EAAE;MACpBd,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BsB,SAAS,EAAE,IAAI,CAACvB,gBAAgB;MAChCE,QAAQ,EAAE,IAAI,CAACA;KAChB;IAEDe,OAAO,CAACO,GAAG,CAAC,mCAAmC,EAAEF,WAAW,CAAC;IAC7D;IACA,IAAI,CAACvB,WAAW,CAACsB,aAAa,CAACC,WAAW,CAAC,CAACb,SAAS,CACnDgB,MAAM,IAAG;MACPR,OAAO,CAACO,GAAG,CAAC,sCAAsC,EAAEC,MAAM,CAAC;MAC3D;IACF,CAAC,EACDT,KAAK,IAAG;MACNC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD;IACF,CAAC,CACF;EACH;CACD;AA1DYpB,oBAAoB,GAAA8B,UAAA,EALhC/B,SAAS,CAAC;EACTgC,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,GACWjC,oBAAoB,CA0DhC;SA1DYA,oBAAoB","names":["Component","QuizAttemptComponent","constructor","route","quizService","studentResponses","studentName","feedback","ngOnInit","quizId","snapshot","paramMap","get","getQuizById","subscribe","data","quiz","questions","forEach","question","id","error","console","selectAnswer","questionId","optionIndex","submitAttempt","attemptData","responses","log","result","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Rahma\\Desktop\\Testing\\CoursZeloFront\\CoursZelo\\src\\app\\Attempt\\attempts\\attempts.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { QuizService } from 'src/app/services/quiz.service';\r\n\r\n// Inline representation of your backend entities\r\ninterface Question {\r\n  id: string;\r\n  text: string;\r\n  options: string[];\r\n}\r\n\r\ninterface Quiz {\r\n  id: string;\r\n  title: string;\r\n  questions: Question[];\r\n}\r\n\r\n@Component({\r\n  selector: 'app-quiz-attempt',\r\n  templateUrl: './quiz-attempt.component.html',\r\n  styleUrls: ['./quiz-attempt.component.css']\r\n})\r\nexport class QuizAttemptComponent implements OnInit {\r\n  quiz: Quiz; // Will hold the quiz data\r\n  studentResponses: { [questionId: string]: number } = {}; // Maps question ID to the student's selected option index\r\n  studentName: string = ''; // To hold the student's name\r\n  feedback: string = ''; // To hold any feedback from the student\r\n\r\n  constructor(\r\n    private route: ActivatedRoute, \r\n    private quizService: QuizService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    const quizId = this.route.snapshot.paramMap.get('id');\r\n    if (quizId) {\r\n      this.quizService.getQuizById(quizId).subscribe(\r\n        (data: Quiz) => {\r\n          this.quiz = data;\r\n          // Initialize responses for each question\r\n          this.quiz.questions.forEach(question => {\r\n            this.studentResponses[question.id] = -1; // -1 means no option selected\r\n          });\r\n        },\r\n        (error) => {\r\n          console.error('Error loading quiz', error);\r\n          // Handle loading error\r\n        }\r\n      );\r\n    } else {\r\n      console.error('Quiz ID not provided');\r\n      // Handle missing quiz ID error\r\n    }\r\n  }\r\n\r\n  selectAnswer(questionId: string, optionIndex: number): void {\r\n    this.studentResponses[questionId] = optionIndex;\r\n  }\r\n\r\n  submitAttempt(): void {\r\n    const attemptData = {\r\n      quizId: this.quiz.id,\r\n      studentName: this.studentName,\r\n      responses: this.studentResponses,\r\n      feedback: this.feedback\r\n    };\r\n    \r\n    console.log('Submitting the following attempt:', attemptData);\r\n    // Assuming your QuizService has a method to submit the attempt\r\n    this.quizService.submitAttempt(attemptData).subscribe(\r\n      result => {\r\n        console.log('Quiz attempt submitted successfully:', result);\r\n        // Redirect to a confirmation page or display a success message\r\n      },\r\n      error => {\r\n        console.error('Error submitting quiz attempt:', error);\r\n        // Handle submission error\r\n      }\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}