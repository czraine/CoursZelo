{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/service-module.service\";\nexport class ModuleComponent {\n  constructor(serviceModule) {\n    this.serviceModule = serviceModule;\n    this.module = {\n      nameModule: '',\n      credit: ''\n    };\n  }\n  addModule() {\n    this.serviceModule.createModule(this.module).subscribe(response => {\n      console.log('Module Added successfully', response);\n    }, error => {\n      console.error('There was an error!', error);\n    });\n  }\n  deleteModule(moduleId) {\n    this.serviceModule.deleteModule(moduleId).subscribe(response => {\n      console.log('Module Deleted successfully', response);\n    }, error => {\n      console.error('There was an error!', error);\n    });\n  }\n  updateModule(moduleId, newData) {\n    this.serviceModule.updateModule(moduleId, newData).subscribe(response => {\n      console.log('Module Updated successfully', response);\n    }, error => {\n      console.error('There was an error!', error);\n    });\n  }\n  getAllModules() {\n    this.serviceModule.getModules().subscribe(modules => {\n      console.log('List of Modules:', modules);\n    }, error => {\n      console.error('There was an error!', error);\n    });\n  }\n  getModuleById(moduleId) {\n    this.serviceModule.getModuleById(moduleId).subscribe(module => {\n      console.log('Module Details:', module);\n    }, error => {\n      console.error('There was an error!', error);\n    });\n  }\n  static #_ = this.ɵfac = function ModuleComponent_Factory(t) {\n    return new (t || ModuleComponent)(i0.ɵɵdirectiveInject(i1.ServiceModuleService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ModuleComponent,\n    selectors: [[\"app-module\"]],\n    decls: 0,\n    vars: 0,\n    template: function ModuleComponent_Template(rf, ctx) {},\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJtb2R1bGUuY29tcG9uZW50LmNzcyJ9 */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZnJvbnQvbW9kdWxlL21vZHVsZS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxnS0FBZ0siLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,eAAe;EAG1BC,YAAoBC,aAAmC;IAAnC,KAAAA,aAAa,GAAbA,aAAa;IACjC,KAAAC,MAAM,GAAG;MACPC,UAAU,EAAE,EAAE;MACdC,MAAM,EAAE;KAET;EALwD;EAMzDC,SAASA,CAAA;IAEL,IAAI,CAACJ,aAAa,CAACK,YAAY,CAAC,IAAI,CAACJ,MAAM,CAAC,CAACK,SAAS,CAACC,QAAQ,IAAG;MAChEC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEF,QAAQ,CAAC;IACpD,CAAC,EAAEG,KAAK,IAAG;MACTF,OAAO,CAACE,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C,CAAC,CAAC;EACJ;EAEAC,YAAYA,CAACC,QAAgB;IAC3B,IAAI,CAACZ,aAAa,CAACW,YAAY,CAACC,QAAQ,CAAC,CAACN,SAAS,CAACC,QAAQ,IAAG;MAC7DC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEF,QAAQ,CAAC;IACtD,CAAC,EAAEG,KAAK,IAAG;MACTF,OAAO,CAACE,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C,CAAC,CAAC;EACJ;EAEAG,YAAYA,CAACD,QAAgB,EAAEE,OAAY;IACzC,IAAI,CAACd,aAAa,CAACa,YAAY,CAACD,QAAQ,EAAEE,OAAO,CAAC,CAACR,SAAS,CAACC,QAAQ,IAAG;MACtEC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEF,QAAQ,CAAC;IACtD,CAAC,EAAEG,KAAK,IAAG;MACTF,OAAO,CAACE,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C,CAAC,CAAC;EACJ;EAEAK,aAAaA,CAAA;IACX,IAAI,CAACf,aAAa,CAACgB,UAAU,EAAE,CAACV,SAAS,CAACW,OAAO,IAAG;MAClDT,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEQ,OAAO,CAAC;IAC1C,CAAC,EAAEP,KAAK,IAAG;MACTF,OAAO,CAACE,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C,CAAC,CAAC;EACJ;EAEAQ,aAAaA,CAACN,QAAgB;IAC5B,IAAI,CAACZ,aAAa,CAACkB,aAAa,CAACN,QAAQ,CAAC,CAACN,SAAS,CAACL,MAAM,IAAG;MAC5DO,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAER,MAAM,CAAC;IACxC,CAAC,EAAES,KAAK,IAAG;MACTF,OAAO,CAACE,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C,CAAC,CAAC;EACJ;EAAC,QAAAS,CAAA;qBAhDQrB,eAAe,EAAAsB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,oBAAA;EAAA;EAAA,QAAAC,EAAA;UAAf1B,eAAe;IAAA2B,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,QAAA,WAAAC,yBAAAC,EAAA,EAAAC,GAAA;IAAAC,MAAA;EAAA","names":["ModuleComponent","constructor","serviceModule","module","nameModule","credit","addModule","createModule","subscribe","response","console","log","error","deleteModule","moduleId","updateModule","newData","getAllModules","getModules","modules","getModuleById","_","i0","ɵɵdirectiveInject","i1","ServiceModuleService","_2","selectors","decls","vars","template","ModuleComponent_Template","rf","ctx","styles"],"sourceRoot":"","sources":["C:\\Users\\Rahma\\Desktop\\Testing\\CoursZeloFront\\CoursZelo\\src\\app\\front\\module\\module.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { ServiceModuleService } from 'src/app/services/service-module.service'; \r\n\r\n@Component({\r\n  selector: 'app-module',\r\n  templateUrl: './module.component.html',\r\n  styleUrls: ['./module.component.css']\r\n})\r\nexport class ModuleComponent {\r\n  \r\n  \r\n  constructor(private serviceModule: ServiceModuleService){}\r\n  module = {\r\n    nameModule: '',\r\n    credit: ''\r\n   \r\n  };\r\n  addModule() : void {\r\n    \r\n      this.serviceModule.createModule(this.module).subscribe(response => {\r\n        console.log('Module Added successfully', response);\r\n      }, error => {\r\n        console.error('There was an error!', error);\r\n      });\r\n    }\r\n\r\n    deleteModule(moduleId: number): void {\r\n      this.serviceModule.deleteModule(moduleId).subscribe(response => {\r\n        console.log('Module Deleted successfully', response);\r\n      }, error => {\r\n        console.error('There was an error!', error);\r\n      });\r\n    }\r\n\r\n    updateModule(moduleId: number, newData: any): void {\r\n      this.serviceModule.updateModule(moduleId, newData).subscribe(response => {\r\n        console.log('Module Updated successfully', response);\r\n      }, error => {\r\n        console.error('There was an error!', error);\r\n      });\r\n    }\r\n  \r\n    getAllModules(): void {\r\n      this.serviceModule.getModules().subscribe(modules => {\r\n        console.log('List of Modules:', modules);\r\n      }, error => {\r\n        console.error('There was an error!', error);\r\n      });\r\n    }\r\n  \r\n    getModuleById(moduleId: number): void {\r\n      this.serviceModule.getModuleById(moduleId).subscribe(module => {\r\n        console.log('Module Details:', module);\r\n      }, error => {\r\n        console.error('There was an error!', error);\r\n      });\r\n    }\r\n\r\n    \r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}